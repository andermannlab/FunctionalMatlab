function affine_transforms = sbxAlignAffineCoreTurboRegAcrossRuns(targetpaths, binned, sigma)
%sbxAlignAffineTurboregAcrossRuns aligns a file (given by path) using ImageJ's TurboReg
%   NOTE: hardcoded path to ImageJ.

    if nargin < 2, binned = 1; end
    if nargin < 3, sigma = 5; end

    % Hardcoded path to ImageJ
    imageJ_path = 'C:\Program Files (x86)\ImageJ_OLD\ImageJ.exe';
    
    % Initialize output and read frames
    affine_transforms = cell(1, length(targetpaths));
    target_mov_path = targetpaths{end};
    
    if length(targetpaths) == 1
        affine_transforms{1} = affine2d;
        return;
    end
    
    % Get the save location
    temp_dir = fileparts(target_mov_path);
    temp_name = [temp_dir '\cross-run-alignment_'];
    macro_temp_path = [temp_name 'macro.ijm'];
    output_temp_path = [temp_name 'output.txt'];
    finished_temp_path = [temp_name 'done.txt'];
    
    % Delete the finishing marker if necessary
    if exist(finished_temp_path), delete(finished_temp_path); end
    
    % Read the tiff of the images to be registered
    data = readtiff(target_mov_path);
    [y, x] = size(data);
    
    % Get the sizes of the files
    szstr = sprintf('0 0 %i %i ', x - 1, y - 1);
    % Estimate targets the way turboreg does
    targets = [0.5*x 0.15*y 0.5*x 0.15*y 0.15*x 0.85*y 0.15*x 0.85*y ...
        0.85*x 0.85*y 0.85*x 0.85*y];
    targets = round(targets);
    targetstr = sprintf('%i ', targets);
    
    % Create the text for the ImageJ macro
    if sigma > 0
        alignstr = sprintf('"-align -window data %s -window ref %s -affine %s -hideOutput"', ...
            szstr, szstr, targetstr);
        
    macro_text = ['setBatchMode(true); ' ...
        'fo = File.open("' output_temp_path '"); ' ...
        'open("' target_mov_path '"); ' ...
        'rename("ref"); '];
    if sigma > 0
        macro_text = [macro_text ...
            'run("Duplicate...", "title=refg"); ' ...
            'run("Gaussian Blur...", "sigma=' num2str(sigma) '"); ' ...
            'imageCalculator("Subtract create 32-bit", "ref", "refg"); ' ...
            'selectWindow("Result of ref"); ' ...
            'rename("hpref"); ' ...
            'selectWindow("ref"); ' ...
            'close(); ' ...
            'selectWindow("refg"); ' ...
            'close(); ' ...
            'selectWindow("hpref"); ' ...
            'rename("ref"); ' ...
        ];
    end
    
    for i = 1:length(targetpaths) - 1
        file_macro_text = [ ...
            'open("' targetpaths{i} '"); ' ...
            'rename("data"); ' ...
        ];
        if sigma > 0
            file_macro_text = [file_macro_text ...
                'run("Duplicate...", "title=datag"); ' ...
                'run("Gaussian Blur...", "sigma=' num2str(sigma) '"); ' ...
                'imageCalculator("Subtract create 32-bit", "data", "datag"); ' ...
                'selectWindow("Result of data"); ' ...
                'rename("hpdata"); ' ...
                'selectWindow("data"); ' ...
                'close(); ' ...
                'selectWindow("datag"); ' ...
                'close(); ' ...
                'selectWindow("hpdata"); ' ...
                'rename("data"); ' ...
            ];
        end
        
        file_macro_text = [file_macro_text ...
            'run("TurboReg ", ' alignstr '); ' ...
            'print(fo, getResult("sourceX", 0) + " " + getResult("sourceX", 1) ' ...
            '+ " " + getResult("sourceX", 2) + " " + getResult("sourceY", 0) + ' ...
            '" " + getResult("sourceY", 1) + " " + getResult("sourceY", 2)); ' ...
            'selectWindow("data"); ' ...
            'close(); ' ...
        ];
        macro_text = [macro_text file_macro_text];
    end
    
    macro_text = [macro_text ...
        'File.close(fo); ' ...
        'selectWindow("ref"); ' ...
        'close(); ' ...
        'fp = File.open("' finished_temp_path '"); ' ...
        'print(fp, "a"); ' ...
        'File.close(fp); ' ...
        'setBatchMode(false); ' ...
        'eval("script", "System.exit(0);"); '];
    
    macro_text = strrep(macro_text, '\', '\\');
        
    % Save macro
    fo = fopen(macro_temp_path, 'wt');
    fprintf(fo, '%s', macro_text);
    fclose(fo);
    
    % Run Turboreg
    while ~exist(macro_temp_path, 'file'), pause(1); end
    pause(3);
    status = system(sprintf('"%s" --headless -macro %s', imageJ_path, macro_temp_path));
    pause(10);
    
    % Wait until the "done" file has been created and then clean up
    while ~exist(finished_temp_path, 'file'), pause(1); end
    pause(2);
    delete(macro_temp_path);
    delete(finished_temp_path);
    
    % Read the output of the macro
    fo = fopen(output_temp_path, 'r');
    tform = fscanf(fo, '%f %f %f %f %f %f')';
    fclose(fo);
    delete(output_temp_path);
    tform = reshape(tform, 6, size(tform, 2)/6);
    
    % Convert to a transformation
    targetgeotransform = targets([3 4 7 8 11 12]);
    targetgeotransform = reshape(targetgeotransform, 2, 3)';
    
    % Iterate over all times
    for i = 1:length(targetpaths) - 1
        ftform = reshape(tform(:, i), 3, 2);
        affine_transforms{i} = fitgeotrans(ftform, targetgeotransform, 'affine');
        affine_transforms{i}.T(3, 1) = affine_transforms{i}.T(3, 1)*binned;
        affine_transforms{i}.T(3, 2) = affine_transforms{i}.T(3, 2)*binned;
        %tmp2 = imtransform(tmp,tformA,'bicubic','XData',[1 size(tmp,1)],'YData',[1 size(tmp,2)],'size',size(tmp),'XYscale',1);
    end
    
    affine_transforms{end} = affine_transforms{end - 1};
    affine_transforms{end}.T = [1 0 0; 0 1 0; 0 0 1];
end